= HasModerated

== Installing

  gem install has_moderated

Right now, rubygems.org is having some problems so I can't push the gem, but you can install from this repo by calling

  rake install

To set up has_moderated in your project, use

  rails generate has_moderated:install


  rake db:migrate

This will generate a Moderation model and a migration for it.

== Usage
To moderate one or more attributes, add

  has_moderated :attr1, :attr2

to your model.

If you want to moderate the creation of a record (for example, you don't want new blog posts to show up until they are accepted by a moderator), use

  has_moderated_existance

You can also specify associations that need to be saved for moderation as well (if moderating the creation of new records) - for example, if a Post has_many :links, and you want to submit these links to moderation as well (note, if you don't, they will be discarded), use

  has_moderated_existance :with_associations => [:links]

in your Post model (post.rb). This only matters when you use has_moderated_existance.

Right now it's not possible to moderate deletion (destruction) of records.

== Manage moderations
To see pending moderations, simply call

  Moderation.all

You can also see moderations for a specific record. For example, if you have Post model, you can call moderations on it.

  post = Post.first
  post.moderations
  
Moderation is a normal ActiveRecord model, you can inspect it in rails console to see what it holds. Data (attr_value) is serialized in YAML format and can be deserialized by calling

  YAML::load(moderation.attr_value)

To accept a moderation, call

  moderation.accept

to discard (destroy) it, call

  moderation.discard

== Tests

I've tested this project using RSpec. You can find the tests in

  test/dummy/spec/models/task_spec.rb

You can run the tests by running

  rake spec

in the root directory.

== License

This project rocks and uses MIT-LICENSE.
