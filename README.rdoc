= HasModerated

== Installing

Add it to your project's Gemfile

  gem "has_moderated"

and run

  bundle install
  
To set up has_moderated in your project, use

  rails generate has_moderated:install


  rake db:migrate

This will generate a Moderation model and a migration for it.

== Upgrading

When upgrading, rerun the generator

  rails generate has_moderated:install

If there is a new migration file and you have filename conflicts, remove the old one and apply the new one, in case the schema changed.
== Usage
To moderate one or more attributes, add

  has_moderated :attr1, :attr2

to your model.

If you want to moderate the creation of a record (for example, you don't want new blog posts to show up until they are accepted by a moderator), use

  has_moderated_create

You can also specify associations that need to be saved for moderation as well (if moderating the creation of new records) - for example, if a Post has_many :links, and you want to submit these links to moderation as well (note, if you don't, they will be discarded), use

  has_moderated_create :with_associations => [:links]

in your Post model (post.rb). This only matters when you use has_moderated_create.
You can also use

  has_moderated_create :with_associations => :all

to include all associations, but I recommend you explicitly specify them if possible. By default, no associations are included.

To moderate destruction of records, use

  has_moderated_destroy

== Moderating associations on existing records
Sometimes you will want to moderate association changes for existing records, not only on create. Right now, there is only one way to do this and it's not as automagic as most of the other things. Instead of doing something like

  post.comments << new_comment
  post.scores << new_score

You will *instead* have to call add_associations_moderated like so

  post.add_associations_moderated(:comments => [new_comment], :scores => [new_score])

The values can be either new records (not in the database), existing records, or Fixnum (numerical) IDs. Please note you should not use .build to create new records, because if you call save on the parent model it will automatically create the record, bypassing moderation.

== Manage moderations
To see pending moderations, simply call

  Moderation.all

You can also see moderations for a specific record. For example, if you have Post model, you can call moderations on it.

  post = Post.first
  post.moderations
  
Moderation is a normal ActiveRecord model, you can inspect it in rails console to see what it holds. Data (attr_value) is serialized in YAML format and can be deserialized by calling

  YAML::load(moderation.attr_value)

To accept a moderation, call

  moderation.accept

to discard (destroy) it, call

  moderation.discard

== Special data attached to moderations

If you need any special data attached to the Moderation model, you can use the moderation_creating hook.

=== Example for moderation_creating hook

For example you have a Comment model, and it is moderated. But your visitors are logged in when they post comments, so you want to add the user ID to the moderation.

* first create a migration to add user_id into Moderation

  rails g migration AddUserIdToModerations user_id:integer
  
* run rake db:migrate
* in models/comment.rb, add something like this:
  
    attr_accessor :moderation_user_id
    moderation_creating do |m|
      m.user_id = self.moderation_user_id
    end

This is just one example on how to do it. You need the attr_accessor here because we are going to pass the user ID from the controller. In the hook you have access to the Moderation model just before it is saved, so you can modify it like any other model. Now just set moderation_user_id on the model before you save it:

    c = Comment.new
    c.moderation_user_id = current_user.id
    c.save

== CarrierWave support

There is support for CarrierWave uploads to be moderated. You must put this line into the model that has a CarrierWave uploader mounted:

  include HasModerated::CarrierWave

Right now *you must use the field name "photo" for the upload filename* because it is currently hardcoded into this module. If you do this, then moderation for the photo should work correctly.

It does not matter if this model has any moderation itself or if you just have an association to it from some other model that is moderated. You must include this module in either case, because it ensures proper serialization of the photo information.

If you need some more customization look at this module in lib/has_moderated/carrier_wave.rb and just copy the methods into your model and customize them (with some care when you do this, some methods should be class methods).

== Tests

I've tested this project using RSpec. You can find the tests in

  test/dummy/spec/models/task_spec.rb

You can run the tests by running

  rake spec

in the root directory.

== TODO

This is just for my personal todo list...
Amend moderations... Eg if you create a new record and save it, then change something additionally and save again.
Preview method which gives changed object but doesnt save it.

For automagic associations, look at https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/collection_association.rb method concat, concat_records, add_to_target
u get the instance of this class from with .association("name")
assoc = t.association(:subtasks)
def assoc.concat *args ; whatever ; end
or if we need block (capture outer scope)
metaclass = class << assoc; self; end
metaclass.send(:define_method, :concat) do
   puts "concat 2"
end

in model use 
after_initialize do...end
to overwrite these methods
ruby-1.8.7-p334 :013 > def assoc.concat_with_mo *args
ruby-1.8.7-p334 :014?>   puts "in concat mo"
ruby-1.8.7-p334 :015?>   concat_without_mo *args
ruby-1.8.7-p334 :016?>   end
 => nil 
ruby-1.8.7-p334 :017 > assoc.class_eval do
ruby-1.8.7-p334 :018 >     alias_method_chain :concat, :mo
ruby-1.8.7-p334 :019?>   end
use add_to_target!!! lowest lvl
add something like has_moderated_association
don't do anything on create (parent.new_record?) since we already handle that
== Problems

You may encounter problems with models that have some sort of non-serializable attributes. This might be something like file attachments, you'll have to try it to see.
If you have a problem like that you can extract the problematic attributes into a seperate has_one association. If you moderate create, save that model without the foreign key first, and then use has_moderated_create :with_associations => [:association_name] and add the association (to the existing associated model) before saving the moderated model. If you have questions about this or don't understand what I mean, open an issue here at GitHub and I will explain it further.

== License

This project rocks and uses MIT-LICENSE.
